openapi: 3.0.0
info:
  title: Collector API
  description: |
    This code is a Flask-based log processing service. It verifies if the client's IP address is on the whitelist,
    generates an API token, and parses received raw log data using regular expressions.
    The parsed log data is combined with host information and then sent to the final storage endpoint.
    The code also includes error handling to ensure data accuracy and security.
  version: 1.0.0
servers:
  - url: http://localhost:5050
    description: Local development server

paths:
  /verify-whitelist:
    get:
      summary: Verify IP and generate API token
      description: Verifies if the client's IP is in the whitelist and generates an API token if valid.

      responses:
        '200':
          description: Successful verification and API token generation
          content:
            application/json:
              schema:
                type: object
                properties:
                  collector-api-token:
                    type: string
                    example: "e0d51e773f0ae9e31479c3c922752d81768161aef9cf4d837eadfbda2c9c5f82"
                  expire-time:
                    message: string
                    example: "2024-08-16T12:34:56.789Z"
        '403':
          description: IP not in whitelist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "IP not in whitelist"

  /send-log:
    post:
      summary: Process raw log data
      description: |
        Validates and processes raw log data from the client,
        combines it with host information, and sends it to the final logging endpoint.
      security:
        - apiTokenAuth: []
      requestBody:
        description: Log entry data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                RAW_LOG:
                  type: string
                  example: "08:31:01  WARN|client.c:  76 client_run     # uv_run()"
                REGEX:
                  type: object
                  properties:
                    log_time_regex:
                      type: string
                      example: "^\\(\\d{2}:\\d{2}:\\d{2}\\)"
                    level_regex:
                      type: string
                      example: "_\\([A-Za-z]+\\)\\|"
                    message_regex:
                      type: string
                      example: "\\|\\w+\\|.*?\\|(.*)"
                    level_rule:
                        type: string
                        example: {"NORMAL": "INFO"}
                HOST_NAME:
                  type: string
                  example: "myhost"
                HOST_IP:
                  type: string
                  example: "10.0.2.100"
                SYSTEM_TYPE:
                  type: string
                  example: "Linux"
                PROCESS_NAME:
                  type: string
                  example: "logger_process"
      responses:
        '201':
          description: Log processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Log processed"
                  status:
                    type: string
                    example: "success"
        '400':
          description: Missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Client missing required fields in the request: raw_log, split_rule"
        '401':
          description: Unauthorized access or API key expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Unauthorized access(Wrong token or collector restarted). Please delete old key and acquire new key."
        '402':
          description: Invalid log level
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid log level: FATAL"
        '403':
          description: IP not in whitelist or permission denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "IP Not in whitelist."
        '502':
          description: Logger unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Failed to connect to the logger server"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal server error"

components:
  securitySchemes:
    apiTokenAuth:
      type: apiKey
      in: header
      name: collector-api-token
